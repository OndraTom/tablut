package tablut.gui;

import tablut.listeners.LoadGameListener;
import tablut.events.LoadGameEvent;
import tablut.exceptions.StorageException;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import tablut.GameThread;
import tablut.Manager;
import tablut.Storage;

/**
 * GUI pro nastavení parametrů hry.
 *
 * @author Ondřej Tom
 */
public class GUIOptions extends javax.swing.JFrame implements LoadGameListener
{
	/**
	 * Vlákno běžící hry.
	 */
	private Thread gameThread;


	/**
	 * GUI hry.
	 */
	private GUIGame gui;


	/**
	 * Storage.
	 */
	private Storage storage;


	/**
	 * Přidá posluchače pro změnu typu hráče.
	 *
	 * @param playerType
	 * @param difficulty
	 */
	private void setChangePlayerTypeListener(JComboBox playerType, final JComboBox difficulty)
	{
		playerType.addItemListener(new ItemListener() {

			// Nastavení viditelnosti volby úrovně hráče (pouze pro počítačového hráče).
			@Override
			public void itemStateChanged(ItemEvent e)
			{
				if (e.getStateChange() == ItemEvent.SELECTED)
				{
					if (e.getItem().toString().equals("computer"))
					{
						difficulty.setEnabled(true);
					}
					else
					{
						difficulty.setEnabled(false);
					}
				}
			}

		});
	}


	/**
	 * Vytvárí GUI (frame).
	 */
	public GUIOptions()
	{
		// Zamezení roztahování okna.
		this.setResizable(false);

		// Úložiště.
		storage = new Storage();

		// Inicializujeme komponenty.
		initComponents();

		// Defaultní volba hráče je člověk, takže vypneme volbu úrovně.
		difficultyRussians.setEnabled(false);
		difficultySwedes.setEnabled(false);

		// Nastavíme posluchače na změnu volby typu uživatele.
		setChangePlayerTypeListener(russianPlayer, difficultyRussians);
		setChangePlayerTypeListener(swedePlayer, difficultySwedes);

		// Nastavíme položku načtení hry.
		loadGame.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e)
			{
				JFileChooser fileChooser = new JFileChooser();
				fileChooser.setAcceptAllFileFilterUsed(false);
				fileChooser.setFileFilter(new FileNameExtensionFilter("XML files", "xml"));
				fileChooser.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						JFileChooser s = (JFileChooser) e.getSource();
						File f = s.getSelectedFile();

						try
						{
							loadGame(storage.load(f));
						}
						catch (StorageException se)
						{
							System.out.println(se.getMessage());
						}
					}
				});
				fileChooser.showOpenDialog(null);
			}
		});

		Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();
		setLocation(((screenDim.width - getSize().width) / 2), (screenDim.height - getSize().height) / 2);
	}


	/**
	 * Nastartuje hru :).
	 *
	 * @param manager
	 */
	private void kickTheGame(Manager manager)
	{
		// Vytvoří GUI - předá manažera.
		gui = new GUIGame(manager);

		gui.addLoadGameListener(this);

		// Zviditelní GUI.
		gui.setVisible(true);

		// Předá manažerovi GUI, jako posluchače události changeGUI.
		manager.addChangeGUIListener(gui);

		// Zahájí hru - vytvoří nové vlákno.
		gameThread = new GameThread(manager);
		gameThread.start();
	}


	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startButton = new javax.swing.JButton();
        swedePlayer = new javax.swing.JComboBox();
        russianPlayer = new javax.swing.JComboBox();
        russiansLabel = new javax.swing.JLabel();
        swedesLabel = new javax.swing.JLabel();
        gameCaption = new javax.swing.JLabel();
        difficultyRussians = new javax.swing.JComboBox();
        difficultyRussiansLabel = new javax.swing.JLabel();
        difficultySwedes = new javax.swing.JComboBox();
        difficultySwedesLabel = new javax.swing.JLabel();
        loadGame = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setText("Start new game");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        swedePlayer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "human", "computer" }));

        russianPlayer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "human", "computer" }));
        russianPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                russianPlayerActionPerformed(evt);
            }
        });

        russiansLabel.setText("Russians");

        swedesLabel.setText("Swedes");

        gameCaption.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        gameCaption.setText("TABLUT");

        difficultyRussians.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "easy", "medium", "hard" }));
        difficultyRussians.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                difficultyRussiansActionPerformed(evt);
            }
        });

        difficultyRussiansLabel.setText("Difficulty");

        difficultySwedes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "easy", "medium", "hard" }));

        difficultySwedesLabel.setText("Difficulty");

        loadGame.setText("Load game");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gameCaption)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(swedesLabel))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(russiansLabel)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(russianPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(difficultyRussiansLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(difficultyRussians, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(swedePlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(difficultySwedesLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(difficultySwedes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(loadGame)
                                .addGap(30, 30, 30)
                                .addComponent(startButton)))
                        .addGap(35, 35, 35))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gameCaption)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(difficultyRussians, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(difficultyRussiansLabel)
                            .addComponent(russianPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(russiansLabel))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(difficultySwedes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(difficultySwedesLabel)
                        .addComponent(swedePlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(swedesLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(loadGame))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Zmáčknutí tlačítka pro zahájení hry.
	 *
	 * @param evt
	 */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

		// Skryje frame s nastavením.
		this.setVisible(false);

		java.awt.EventQueue.invokeLater(
			new Runnable()
			{
				@Override
				public void run()
				{
					// Vytvoří nového manažera se zvolenými parametry.
					kickTheGame(new Manager(
							russianPlayer.getSelectedIndex(),
							swedePlayer.getSelectedIndex(),
							difficultyRussians.getSelectedIndex(),
							difficultySwedes.getSelectedIndex())
					);
				}
			}
		);

    }//GEN-LAST:event_startButtonActionPerformed


	/**
	 * Načtení hry předáním manažera.
	 *
	 * @param manager
	 */
	private void loadGame(Manager manager)
	{
		if (gui != null)
		{
			gui.setVisible(false);
		}

		kickTheGame(manager);
	}


	/**
	 * Načtení hry pomocí události.
	 *
	 * @param event
	 */
	@Override
	public void loadGame(final LoadGameEvent event)
	{
		loadGame(event.getManager());
	}


    private void russianPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_russianPlayerActionPerformed

    }//GEN-LAST:event_russianPlayerActionPerformed

    private void difficultyRussiansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_difficultyRussiansActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_difficultyRussiansActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox difficultyRussians;
    private javax.swing.JLabel difficultyRussiansLabel;
    private javax.swing.JComboBox difficultySwedes;
    private javax.swing.JLabel difficultySwedesLabel;
    private javax.swing.JLabel gameCaption;
    private javax.swing.JButton loadGame;
    private javax.swing.JComboBox russianPlayer;
    private javax.swing.JLabel russiansLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JComboBox swedePlayer;
    private javax.swing.JLabel swedesLabel;
    // End of variables declaration//GEN-END:variables
}
